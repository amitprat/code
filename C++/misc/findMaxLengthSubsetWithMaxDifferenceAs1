# 0 "/home/amit/codedir/PracticeCode/findMaxLengthSubsetWithMaxDifferenceAs1.cpp"
# 1 "/home/amit/codedir/PracticeCode//"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/amit/codedir/PracticeCode/findMaxLengthSubsetWithMaxDifferenceAs1.cpp"
# 15 "/home/amit/codedir/PracticeCode/findMaxLengthSubsetWithMaxDifferenceAs1.cpp"
void Longest1Subset(int* pArr, int sz)
{
   std::unordered_map<int, int> counts;
   for (int i = 0; i < sz; i++)
   {
       counts[pArr[i]]++;
       counts[pArr[i]-1]++;
       printf("%d,", pArr[i]);
   }
   std::pair<int,int> res(0,0);
   for (std::unordered_map<int,int>::iterator i = counts.begin(); i != counts.end(); i++)
      res = res.second > i->second ? res : *i;


   printf(" => (%d to %d): %d\n", res.first, res.first+1, res.second);
}

int main()
{
   int test1[] = {1,5,1,0,2,6,2,1};
   int test2[] = {6,6,5,5,4,4,3,3,2,2,2,1,0,7,7,7,7};
   int test3[] = {0,0,-1,-1,-9,9,-9,9,-9,9,-9,-10,9};
   Longest1Subset(test1, sizeof(test1)/sizeof(*test1));
   Longest1Subset(test2, sizeof(test2)/sizeof(*test2));
   Longest1Subset(test3, sizeof(test3)/sizeof(*test3));
   getch();
}
